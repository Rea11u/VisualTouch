import cv2
import numpy as np
from google.colab.patches import cv2_imshow

def video_import(path):
    cap = cv2.VideoCapture(path)
    img_list = []
    while(cap.isOpened()):
        ret, frame = cap.read()
        if (isinstance(frame, np.ndarray)):
            img_list.append(frame)
        else:
            print('Видео считано')
            break
    cap.release()
    return img_list

def color_noise(image):
    #оценка общего уровня шума
    blured_img = cv2.blur(image, (3,3))
    threshHld = 127
    gray_orig = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    gray_blured = cv2.cvtColor(blured_img, cv2.COLOR_BGR2GRAY)

    (thrash, bin_orig) = cv2.threshold(gray_orig, threshHld, 255, cv2.THRESH_BINARY)
    (thrash, bin_blured) = cv2.threshold(gray_blured, threshHld, 255, cv2.THRESH_BINARY)

    difference = cv2.bitwise_xor(bin_orig, bin_blured, mask = None)
    nonZero = cv2.countNonZero(difference)
    # найдем общий размер картинки (ее площадь) в пикселях
    allPixels = bin_orig.shape[0]*bin_orig.shape[1]
    # найдем процент шума на картинке
    noise = nonZero/allPixels*100

    #поиск самого шумного канала
    green_image = np.zeros(image.shape)
    green_channel = image[:,:,1]
    green_image[:,:,1] = green_channel

    blue_image = np.zeros(image.shape)
    blue_channel = image[:,:,0]
    blue_image[:,:,0] = blue_channel

    red_image = np.zeros(image.shape)
    red_channel = image[:,:,2]
    red_image[:,:,2] = red_channel

    gray_orig = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    (_, bin_orig) = cv2.threshold(gray_orig, threshHld, 255, cv2.THRESH_BINARY)
    (_, bin_green) = cv2.threshold(green_channel, threshHld, 255, cv2.THRESH_BINARY)
    (_, bin_blue) = cv2.threshold(blue_channel, threshHld, 255, cv2.THRESH_BINARY)
    (_, bin_red) = cv2.threshold(red_channel, threshHld, 255, cv2.THRESH_BINARY)

    diffGreen = cv2.bitwise_xor(bin_green, bin_blured)
    diffBlue = cv2.bitwise_xor(bin_blue, bin_blured)
    diffRed = cv2.bitwise_xor(bin_red, bin_blured)

    nonZeroGreen = cv2.countNonZero(diffGreen)
    nonZeroBlue = cv2.countNonZero(diffBlue)
    nonZeroRed = cv2.countNonZero(diffRed)

    if nonZeroGreen >= nonZeroBlue:
        if nonZeroGreen >= nonZeroRed:
            channel = 'green'
        else:
            channel = 'red'
    elif nonZeroBlue >= nonZeroRed:
        channel = 'blue'
    else:
        channel = 'red'

    return [channel, noise]

  #!!!!!!!!!!!! НАСТРОИТЬ!!!!!!!!!!!!!!
def morph_transform(noise, channel, image):

    threshHld = 127
    transformed_image = image
    #выбор ядра в зависимости от шума
    if noise <= 10:
        kernel = np.ones((2,2),np.uint8)
    if ((noise > 10) and (noise <= 20)):
        kernel = np.ones((3,3),np.uint8)
    if noise > 20:
        kernel = np.ones((4,4),np.uint8)

    #корекция цветового канала
    if channel == 'red':
        red_channel = image[:,:,2]
        (_, bin_red) = cv2.threshold(red_channel, threshHld, 255, cv2.THRESH_BINARY)
        morphDilate = cv2.dilate(bin_red, kernel, iterations = 1)
        transformed_image[:,:,2] = morphDilate
    if channel == 'green':
        green_channel = image[:,:,1]
        (_, bin_green) = cv2.threshold(green_channel, threshHld, 255, cv2.THRESH_BINARY)
        morphDilate = cv2.dilate(bin_green, kernel, iterations = 1)
        transformed_image[:,:,1] = morphDilate
    if channel == 'blue':
        blue_channel = image[:,:,0]
        (_, bin_blue) = cv2.threshold(blue_channel, threshHld, 255, cv2.THRESH_BINARY)
        morphDilate = cv2.dilate(bin_blue, kernel, iterations = 1)
        transformed_image[:,:,0] = morphDilate

    return(transformed_image)
      
def gaussian_transform(noise, channel, image):

    threshHld = 127
    transformed_image = image
    #выбор ядра в зависимости от шума
    if noise <= 10:
        rep = 1
    if ((noise > 10) and (noise <= 20)):
        rep = 2
    if noise > 20:
        rep = 3

    #корекция цветового канала
    if channel == 'red':
        red_channel = image[:,:,2]
        gaussian_blur = cv2.GaussianBlur(red_channel, (11, 11), rep)
        transformed_image[:,:,2] = gaussian_blur
    if channel == 'green':
        green_channel = image[:,:,1]
        gaussian_blur = cv2.GaussianBlur(green_channel, (11, 11), rep)
        transformed_image[:,:,1] = gaussian_blur
    if channel == 'blue':
        blue_channel = image[:,:,0]
        gaussian_blur = cv2.GaussianBlur(blue_channel, (11, 11), rep)
        transformed_image[:,:,0] = gaussian_blur

    return(transformed_image)

def create_video(path, name, image_list):
    width = image_list[0].shape[1]
    height = image_list[0].shape[0]

    out = cv2.VideoWriter(path+'/'+name, cv2.VideoWriter_fourcc(*'DIVX'), 30, (width, height))

    for image in image_list:
        out.write(image)
    out.release()
    print('Видео сохранено')

#считали видео
test_list = video_import('/content/Y2mate_mx_помидор_крутится_под_аристократическую_музыку_18_го_века.mp4')
#список для обработанных кадров
remastered_list = []
#покадровая обработка
for kadr in test_list:
    [ch, ns] = color_noise(kadr)
    remImg = gaussian_transform(ns, ch, kadr)
    remastered_list.append(remImg)
#создание нового обработанного видео
create_video('/content', 'remaster.mp4', test_list)

#https://colab.research.google.com/drive/1CILRmcF4H6PlpejYHxy9OygD-rLq1ji_?usp=sharing#scrollTo=mloRvdOiH2dn
